<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rhino.Licensing</name>
    </assembly>
    <members>
        <member name="T:Rhino.Licensing.AbstractLicenseValidator">
            <summary>
            Base license validator.
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.Log">
            <summary>
            License validator logger
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.TimeServers">
            <summary>
            Standard Time servers
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.licenseServerUrl">
            <summary>
            The license server URL for floating licenses
            </summary>
        </member>
        <member name="E:Rhino.Licensing.AbstractLicenseValidator.LicenseInvalidated">
            <summary>
            Fired when license data is invalidated
            </summary>
        </member>
        <member name="E:Rhino.Licensing.AbstractLicenseValidator.LicenseExpired">
            <summary>
            Fired when license is expired
            </summary>
        </member>
        <member name="E:Rhino.Licensing.AbstractLicenseValidator.MultipleLicensesWereDiscovered">
            <summary>
            Event that's raised when duplicate licenses are found
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.DisableTimeServersCheck">
            <summary>
            Disable the <see cref="P:Rhino.Licensing.AbstractLicenseValidator.ExpirationDate"/> validation with the time servers
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.ExpirationDate">
            <summary>
            Gets the expiration date of the license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LeaseTimeout">
            <summary>
            Lease timeout
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsageBehavior">
            <summary>
            How to behave when using the same license multiple times
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseType">
            <summary>
            Gets the Type of the license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.UserId">
            <summary>
            Gets the Id of the license holder
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.Name">
            <summary>
            Gets the name of the license holder
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseAttributes">
            <summary>
            Gets extra license information
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.DiscoveryEnabled">
            <summary>
            Whether the client discovery server is enabled. This detects duplicate licenses used on the same network.
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.License">
            <summary>
            Gets or Sets the license content
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a license validator with specfied public key.
            </summary>
            <param name="publicKey">public key</param>
            <param name="enableDiscovery">Whether to enable the client discovery server to detect duplicate licenses used on the same network.</param>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String,System.String,System.Guid)">
            <summary>
            Creates a license validator using the client information
            and a service endpoint address to validate the license.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.AssertValidLicense">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.SubscriptionEndpoint">
            <summary>
            Gets or Sets the endpoint address of the subscription service
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.SubscriptionEndpointPasscode">
            <summary>
            Gets or sets the optional subscription endpoint passcode.
            </summary>
            <value>
            The optional subscription endpoint passcode.
            </value>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.SuscriptionEndPointCheckDaysNearExpiration">
            <summary>
            Gets or sets the suscription end point check days near expiration.
            </summary>
            <value>
            The number of days before expiration that the subscription starts checking in to see if there is a new license.
            </value>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryOverwritingWithNewLicense(System.String)">
            <summary>
            Loads the license file.
            </summary>
            <param name="newLicense"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.GetTimeServers">
            <summary>
            Extension point to return different time servers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.RemoveExistingLicense">
            <summary>
            Removes existing license from the machine.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryLoadingLicenseValuesFromValidatedXml">
            <summary>
            Loads license data from validated license file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.DisableFloatingLicenses">
            <summary>
            Gets or Sets Floating license support
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.DisableFutureChecks">
            <summary>
            Disables further license checks for the session.
            </summary>
        </member>
        <member name="T:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage">
            <summary>
            Options for detecting multiple licenses
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage.Deny">
            <summary>
            Deny if multiple licenses are used
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.MultipleLicenseUsage.AllowForSameUser">
            <summary>
            Only allow if it is running for the same user
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryClient">
            <summary>
             Publish the precense of a client over the network
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryClient.#ctor(System.Guid,System.Guid,System.String,System.String)">
            <summary>
             Create a new instance
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryClient.PublishMyPresence">
            <summary>
             Publish the presence of this node
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryHost">
            <summary>
             Listen to precense notifications
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryHost.Start">
            <summary>
             Starts listening to network notifications
            </summary>
        </member>
        <member name="E:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscovered">
            <summary>
             Notify when a client is discovered
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs">
            <summary>
            Notification raised when a client is discovered
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.UserId">
            <summary>
            The client's license id
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.MachineName">
            <summary>
            The client machine name
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.UserName">
            <summary>
            The client user name
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Discovery.DiscoveryHost.ClientDiscoveredEventArgs.SenderId">
            <summary>
            The id of the sender
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Discovery.DiscoveryHost.Dispose">
            <summary>
            Disposes of the object
            </summary>
        </member>
        <member name="T:Rhino.Licensing.FloatingLicenseNotAvailableException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvailableException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvailableException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvailableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvailableException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvailableException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.FloatingLicenseNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvailableException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.ILicensingService">
            <summary>
            Service contract of the licensing server.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.ILicensingService.LeaseLicense(System.String,System.String,System.Guid)">
            <summary>
            Issues a float license for the user.
            </summary>
            <param name="machine">machine name</param>
            <param name="user">user name</param>
            <param name="id">Id of the license holder</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.InvalidationType">
            <summary>
            InvalidationType
            </summary>
        </member>
        <member name="F:Rhino.Licensing.InvalidationType.CannotGetNewLicense">
            <summary>
            Can not create a new license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.InvalidationType.TimeExpired">
            <summary>
            License is expired
            </summary>
        </member>
        <member name="T:Rhino.Licensing.ISubscriptionLicensingService">
            <summary>
            Service contract of subscription server.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.ISubscriptionLicensingService.LeaseLicense(System.String,System.String)">
            <summary>
            Issues an updated subscription license
            </summary>
            <param name="previousLicense">The current or previous license.</param>
            <param name="passcode">optional passcode for server license leasing</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Logging.ILog.Log(Rhino.Licensing.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
             <summary>
             Log a message the specified log level.
             </summary>
             <param name="logLevel">The log level.</param>
             <param name="messageFunc">The message function.</param>
             <param name="exception">An optional exception.</param>
             <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
             <returns>true if the message was logged. Otherwise false.</returns>
             <remarks>
             Note to implementers: the message func should not be called if the loglevel is not enabled
             so as not to incur performance penalties.
            
             To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
             </remarks>
        </member>
        <member name="T:Rhino.Licensing.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:Rhino.Licensing.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Rhino.Licensing.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Rhino.Licensing.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Rhino.Licensing.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Rhino.Licensing.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Rhino.Licensing.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Logging.LogProvider.SetCurrentLogProvider(Rhino.Licensing.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:Rhino.Licensing.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Rhino.Licensing.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:Rhino.Licensing.Logging.LogProvider.SetCurrentLogProvider(Rhino.Licensing.Logging.ILogProvider)"/>
            </summary>
        </member>
        <member name="M:Rhino.Licensing.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Rhino.Licensing.Logging.ILog"/></returns>
        </member>
        <member name="M:Rhino.Licensing.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:Rhino.Licensing.Logging.ILog"/></returns>
        </member>
        <member name="M:Rhino.Licensing.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:Rhino.Licensing.Logging.ILog"/></returns>
        </member>
        <member name="M:Rhino.Licensing.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Rhino.Licensing.Logging.ILog"/></returns>
        </member>
        <member name="M:Rhino.Licensing.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:Rhino.Licensing.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:Rhino.Licensing.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:Rhino.Licensing.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Rhino.Licensing.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
             <summary>
             Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
             For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually
             used. So, this class simulates that. it will replace any text in {curly braces} with an index number.
            
             "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
             </summary>
             <param name="messageBuilder">The message builder.</param>
             <param name="formatParameters">The format parameters.</param>
             <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.LicenseExpiredException">
            <summary>
             Thrown when license is found but is past it's expiration date
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseFileNotFoundException">
            <summary>
            Thrown when a valid license file can not be
            found on the client machine.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseGenerator">
            <summary>
            LicenseGenerator generates and signs license.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseGenerator"/>. 
            </summary>
            <param name="privateKey">private key of the product</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.GenerateFloatingLicense(System.String,System.String)">
            <summary>
            Generates a new floating license.
            </summary>
            <param name="name">Name of the license holder</param>
            <param name="publicKey">public key of the license server</param>
            <returns>license content</returns>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.Generate(System.String,System.Guid,System.DateTime,Rhino.Licensing.LicenseType)">
            <summary>
            Generates a new license
            </summary>
            <param name="name">name of the license holder</param>
            <param name="id">Id of the license holder</param>
            <param name="expirationDate">expiry date</param>
            <param name="licenseType">type of the license</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Licensing.LicenseGenerator.Generate(System.String,System.Guid,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.String},Rhino.Licensing.LicenseType)">
            <summary>
            Generates a new license
            </summary>
            <param name="name">name of the license holder</param>
            <param name="id">Id of the license holder</param>
            <param name="expirationDate">expiry date</param>
            <param name="licenseType">type of the license</param>
            <param name="attributes">extra information stored as key/valye in the license file</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.LicenseNotFoundException">
            <summary>
            Thrown when suitable license is not found.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">steaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseType">
            <summary>
            License Type
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.None">
            <summary>
            No type specified
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Trial">
            <summary>
            For trial use
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Standard">
            <summary>
            Standard license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Personal">
            <summary>
            For personal use
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Professional">
            <summary>
            Professional license (subscription)
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Architect">
            <summary>
            Architect license (subscription)
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.ManagedServiceProvider">
            <summary>
            MSP license (subscription)
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Education">
            <summary>
            Educational license (subscription)
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Business">
            <summary>
            Business license (subscription)
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Enterprise">
            <summary>
            Enterprise license (subscription)
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Floating">
            <summary>
            Floating license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Subscription">
            <summary>
            Subscription based license
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicenseValidator">
            <summary>
            License validator validates a license file
            that can be located on disk.
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseValidator.Log">
            <summary>
            License validator logger
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator"/>.
            </summary>
            <param name="publicKey">public key</param>
            <param name="licensePath">path to license file</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String,System.String,System.Guid)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator"/>.
            </summary>
            <param name="publicKey">public key</param>
            <param name="licensePath">path to license file</param>
            <param name="licenseServerUrl">license server endpoint address</param>
            <param name="clientId">Id of the license holder</param>
        </member>
        <member name="P:Rhino.Licensing.LicenseValidator.License">
            <summary>
            Gets or Sets the license content
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.AssertValidLicense">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.RemoveExistingLicense">
            <summary>
            Removes existing license from the machine.
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicensingService">
            <summary>
            Licensing server implementation.
            Because we use this service behavior, we don't have to worry
            about multi threading issues. it is not something that we
            expect to have to deal with huge load, anyway.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicensingService.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicensingService"/>.
            </summary>
        </member>
        <member name="P:Rhino.Licensing.LicensingService.SoftwarePublicKey">
            <summary>
            Gets or Sets the public key of the product
            </summary>
        </member>
        <member name="P:Rhino.Licensing.LicensingService.LicenseServerPrivateKey">
            <summary>
            Gets or Sets the private key of the license server
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicensingService.LeaseLicense(System.String,System.String,System.Guid)">
            <summary>
            Leases a new license to the client machine.
            </summary>
            <param name="machine">client machine name</param>
            <param name="user">user name</param>
            <param name="id">Id of the license holder</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Licensing.RhinoLicensingException">
            <summary>
            Base class for all licensing exceptions.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.SntpClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rhino.Licensing.SntpClient.#ctor(System.String[])">
            <summary>
            
            </summary>
            <param name="hosts"></param>
        </member>
        <member name="M:Rhino.Licensing.SntpClient.BeginGetDate(System.Action{System.DateTime},System.Action)">
            <summary>
            
            </summary>
            <param name="getTime"></param>
            <param name="failure"></param>
        </member>
        <member name="T:Rhino.Licensing.StringLicenseValidator">
            <summary>
            Validates content of a license file
            </summary>
        </member>
        <member name="M:Rhino.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.StringLicenseValidator"/>
            </summary>
            <param name="publicKey">public key</param>
            <param name="license">license content</param>
        </member>
        <member name="P:Rhino.Licensing.StringLicenseValidator.License">
            <summary>
            License content
            </summary>
        </member>
    </members>
</doc>
