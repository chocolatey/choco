<?xml version="1.0" encoding="utf-8" ?>
<project name="nugetBuild" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - Add custom tasks in BuildTasks.Custom folder with file by the same name - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <include buildfile="${dirs.current.file}${path.separator}default.build.settings" />
  <property name="build.step.name" value="${project::get-name()}" />
  <property name="build.step.path" value="${project::get-buildfile-path()}" />
  <!-- build step customizations below this -->

  <property name="pkg.build.date" value="20100801" overwrite="false" />
  <property name="file.nuget.version" value="${dirs.drop.nuget}${path.separator}version.xml" />
  <property name="nuget.version" value="${version.major}.${version.minor}.${version.build}.${version.revision}" />
  <property name="nuget.version" value="${version.major}.${version.minor}.${version.patch}"  if="${version.use_semanticversioning}" />

  <property name="fail.build.on.error" value="false" />

  <target name="go" depends="run_tasks" />

  <!-- run_normal_tasks is called from run_tasks unless replace extension exists-->
  <target name="run_normal_tasks"
          depends="update_build_date, update_version, build_nugget, remove_nuget_files"
          description="Building nuget."
          if="${run.nuget}" />

  <target name="update_build_date">
    <property name="pkg.current.date" value="${datetime::now()}" />
    <property name="pkg.current.date.year" value="${datetime::get-year(pkg.current.date)}" />
    <property name="pkg.current.date.month" value="${datetime::get-month(pkg.current.date)}" />
    <property name="pkg.current.date.month" value="${'0' + pkg.current.date.month}" if="${string::get-length(pkg.current.date.month) == 1}" />
    <property name="pkg.current.date.month" value="${'0' + pkg.current.date.month}" if="${string::get-length(pkg.current.date.month) == 1}" />
    <property name="pkg.current.date.day" value="${datetime::get-day(pkg.current.date)}" />
    <property name="pkg.current.date.day" value="${'0' + pkg.current.date.day}" if="${string::get-length(pkg.current.date.day) == 1}" />
    <property name="pkg.build.date" value="${'' + pkg.current.date.year + pkg.current.date.month + pkg.current.date.day}" />
  </target>

  <target name="update_version">
    <property name="nuget.version" value="${nuget.version + '-' + version.nuget.prerelease}" if="${version.nuget.prerelease != ''}" />
    <property name="nuget.version" value="${nuget.version + '.' + pkg.build.date}" if="${version.use.build_date and version.use_semanticversioning and version.nuget.prerelease == ''}" />
    <property name="nuget.version" value="${nuget.version + '-' + pkg.build.date}" if="${version.use.build_date and version.nuget.prerelease != ''}" />
    <property name="nuget.version" value="${nuget.version + '.' + version.fix}" if="${version.fix != '0' and not version.use.build_date}" />
    <property name="nuget.version" value="${nuget.version + '-' + version.fix}" if="${version.fix != '0' and version.use.build_date}" />
    <!-- version.use.build_date -->
    <echo level="Warning" message="Using ${nuget.version} as the version for the nuget package(s)." />
  </target>

  <target name="build_nugget">
    <echo level="Warning" message="Finding and building all nuggets in ${dirs.drop.nuget}."/>
    <foreach item="File" property="spec.file">
      <in>
        <items>
          <include name="${dirs.drop.nuget}${path.separator}**${path.separator}*.nuspec" />
        </items>
      </in>
      <do>
        <echo level="Warning" message="executing '${app.nuget} pack ${spec.file} -Version ${nuget.version}'" />
        <exec
          program="cmd"
          workingdir="${directory::get-parent-directory(spec.file)}"
          failonerror="${fail.build.on.error}"
          if="${platform::is-windows()}">
            <arg value='/c ${app.nuget} pack "${spec.file}" -Version ${nuget.version}' />
        </exec>
        <exec
          program="mono"
          workingdir="${directory::get-parent-directory(spec.file)}"
          failonerror="${fail.build.on.error}"
          if="${platform::is-unix()}"
          >
          <arg value='"${app.nuget}"' />
          <arg value='pack "${spec.file}"' />
          <arg value='-Version "${nuget.version}"' />
        </exec>
      </do>
    </foreach>
  </target>

  <target name="remove_nuget_files">
    <delete>
      <fileset basedir="${dirs.drop.nuget}" >
        <exclude name="**/*.nupkg" />
        <include name="**/*" />
      </fileset>
    </delete>
  </target>

</project>
