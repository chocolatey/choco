<?xml version="1.0" encoding="utf-8" ?>
<project name="BuildSettings">
  <!-- DEFAULT BUILD SETTINGS -->
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- Leave the following settings alone -->
  <!-- Override any setting here in the build properties file (.uppercut) -->
  <property name="project.name" value="__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__" overwrite="false" />
  <!-- Edit your .uppercut file to override the defaults -->
  <property name="repository.path" value="__REPOSITORY_PATH__" overwrite="false" />
  <property name="path_to_solution" value="src" overwrite="false" />
  <property name="company.name" value="__COMPANY_NAME__" overwrite="false" />

  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="file.current.no_extension" value="default" overwrite="false" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />
  <property name="folder.app.drop" value="${project.name}" overwrite="false" />

  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="dirs.build_scripts" value="${dirs.current}${path.separator}${folder.build_scripts}" overwrite="false" />

  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}" overwrite="false" />

  <include buildfile="${dirs.build_scripts}${path.separator}csharp.functions" />

  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.code_build" value="${dirs.current}${path.separator}${folder.code_build}" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" overwrite="false" />
  <property name="dirs.build.code" value="${path::get-full-path(dirs.build)}${path.separator}${folder.app.drop}" overwrite="false" />

  <property name="folder.code_drop" value="code_drop" overwrite="false" />
  <property name="dirs.code_drop" value="${dirs.current}${path.separator}${folder.code_drop}" overwrite="false" />
  <property name="dirs.drop" value="${dirs.current}${path.separator}${folder.code_drop}" overwrite="false" />
  <property name="dirs.drop.app" value="${dirs.drop}${path.separator}${folder.app.drop}" overwrite="false" />

  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="dirs.build_artifacts" value="${path::get-full-path(dirs.build)}${path.separator}${folder.build_artifacts}" overwrite="false" />

  <property name="folder.database" value="${project.name}.Database" overwrite="false" />
  <property name="dirs.db" value="${dirs.current}${path.separator}${folder.database}" overwrite="false" />
  <property name="dirs.database" value="${dirs.current}${path.separator}${folder.database}" overwrite="false" />
  <property name="dirs.build.database" value="${dirs.build}${path.separator}${folder.database}" overwrite="false" />

  <property name="folder.reports" value="${project.name}.Reports" overwrite="false" />
  <property name="dirs.reports" value="${dirs.current}${path.separator}${folder.reports}" overwrite="false" />

  <property name="folder.deployment" value="deployment" overwrite="false" />
  <property name="dirs.deployment" value="${dirs.current}${path.separator}${folder.deployment}" overwrite="false" />
  <property name="dirs.drop.deployment" value="${dirs.drop}${path.separator}${folder.deployment}" overwrite="false" />

  <property name="folder.documentation" value="docs" overwrite="false" />
  <property name="dirs.docs" value="${dirs.current}${path.separator}${folder.documentation}" overwrite="false" />
  <property name="dirs.documentation" value="${dirs.current}${path.separator}${folder.documentation}" overwrite="false" />
  <property name="dirs.build.docs" value="${dirs.build}${path.separator}${folder.documentation}" overwrite="false" />

  <property name="folder.references" value="lib" overwrite="false" />
  <property name="dirs.references" value="${dirs.current}${path.separator}${folder.references}" overwrite="false" />
  <property name="dirs.tools" value="${dirs.current}${path.separator}${folder.references}" overwrite="false" />
  <property name="dirs.lib" value="${dirs.current}${path.separator}${folder.references}" overwrite="false" />

  <property name="folder.settings" value="settings" overwrite="false" />
  <property name="dirs.settings" value="${dirs.current}${path.separator}${folder.settings}" overwrite="false" />
  <property name="dirs.environments.settings" value="${dirs.settings}" overwrite="false" />

  <property name="folder.environment_files" value="environment.files" overwrite="false" />
  <property name="dirs.environment_files" value="${dirs.current}${path.separator}${folder.environment_files}" overwrite="false" />
  <property name="dirs.build.environmentfiles" value="${dirs.build}${path.separator}${folder.environment_files}" overwrite="false" />

  <property name="folder.file_server" value="file.server" overwrite="false" />
  <property name="dirs.file_server" value="${dirs.current}${path.separator}${folder.file_server}" overwrite="false" />

  <property name="folder.gems" value="gems" overwrite="false" />
  <property name="dirs.gems" value="${dirs.current}${path.separator}${folder.gems}" overwrite="false" />
  <property name="dirs.drop.gems" value="${dirs.drop}${path.separator}${folder.gems}" overwrite="false" />

  <property name="folder.nuget" value="nuget" overwrite="false" />
  <property name="dirs.nuget" value="${dirs.current}${path.separator}${folder.nuget}" overwrite="false" />
  <property name="dirs.drop.nuget" value="${dirs.drop}${path.separator}${folder.nuget}" overwrite="false" />

  <property name="dirs.program_files" value="${path::get-full-path(environment::get-folder-path('ProgramFiles'))}" overwrite="false" />
  <property name="dirs.program_files_x86" value="${string::replace(dirs.program_files, 'Program Files', 'Program Files (x86)')}" overwrite="false" />

  <property name="log.build" value="${dirs.build}${path.separator}build.log" />
  <property name="version.uppercut" value="0" overwrite="false" />

  <property name="build.step.name" value="${project::get-name()}" overwrite="false" />
  <property name="build.step.path" value="${project::get-buildfile-path()}" overwrite="false" />
  <property name="file.build_info" value="${dirs.build}${path.separator}_BuildInfo.xml" overwrite="false" />

  <property name="file.uppercut.assembly" value="uppercut.tasks.dll" overwrite="false" />
  <property name="path.uppercut.assembly" value="${dirs.current}${path.separator}${folder.build_scripts}${path.separator}${file.uppercut.assembly}" overwrite="false" />

  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="true" />

  <!-- FRAMEWORKS -->
  <!-- microsoft.framework: vb6, net-1.0, net-1.1, net-2.0, net-3.5, net-4.0, net-4.5, netcf-1.0, netcf-2.0, silverlight-2.0, mono-1.0, mono-2.0, mono-3.5, mono-4.0, moonlight-2.0 (Enter multiple ones with a "," to take advantage of multitargeting) -->
  <property name="microsoft.framework" value="net-4.0" overwrite="false" />
  <!-- language.short: vb,cs -->
  <property name="language.short" value="cs" overwrite="false" />
  <property name="language.long" value="CSharp" overwrite="false" />
  <!-- test.framework: none, mbunit2, nunit, xunit, gallio - with gallio it must be installed in program files on every computer. Alternatively you can add 26MB to your repo and put it there. Little much for my tastes. -->
  <property name="test.framework" value="none" overwrite="false" />
  <!-- source_control_type: svn, vss, tfs, vault, git, hg -->
  <property name="source_control_type" value="git" overwrite="false" />
  <!-- cover.framework: none, ncover, opencover -->
  <property name="cover.framework" value="none" overwrite="false" />

  <!-- ASSEMBLY VARIABLES -->
  <property name="version.use_semanticversioning" value="true" overwrite="false" />
  <property name="version.major" value="0" overwrite="false" />
  <property name="version.minor" value="0" overwrite="false" />
  <property name="version.patch" value="1" overwrite="false" />
  <property name="version.build" value="0" overwrite="false" />
  <property name="version.revision" value="0" overwrite="false" />
  <property name="version.hash" value="${version.revision}" overwrite="false" />
  <property name="assembly.version.full" value="${version.major}.${version.minor}.${version.build}.${version.revision}" />
  <property name="assembly.version.full" value="${version.major}.${version.minor}.${version.patch}.0" if="${version.use_semanticversioning}" />
  <property name="file.sharedassembly" value="SolutionVersion.${language.short}" overwrite="false" />
  <property name="path.file.sharedassembly" value="${dirs.current}${path.separator}${path_to_solution}${path.separator}${file.sharedassembly}" overwrite="false" />
  <property name="assembly.description" value="${project.name} is a product of ${company.name}" overwrite="false" />
  <property name="assembly.copyright" value="Copyright Â© ${datetime::get-year(datetime::now())} - Present, ${company.name} - All Rights Reserved." overwrite="false" />
  <property name="assembly.clscompliant" value="false" overwrite="false" />
  <!-- partially trusted callers doesn't set correctly with assembly generator - Leave false for now-->
  <property name="allow.partially_trusted_callers" value="false" overwrite="false" />
  <property name="sign.project_with_key" value="false" overwrite="false" />
  <property name="path.key.name.private" value="${dirs.current}${path.separator}${project.name}.snk" overwrite="false" />
  <property name="path.key.name.public" value="${dirs.build}${path.separator}public.${project.name}.snk" overwrite="false" />

  <!-- packaging versioning -->
  <property name="version.use.build_date" value="false" overwrite="false" />
  <!--gem versioning -->
  <property name="version.gem.suffix" value="" overwrite="false" />
  <property name="use.gem.build_date" value="false" overwrite="false" />
  <!--nuget versioning -->
  <property name="version.nuget.prerelease" value="" overwrite="false" />
  <property name="nuget.version" value="${version.major}.${version.minor}.${version.build}.${version.revision}" overwrite="false" />
  <property name="nuget.version" value="${version.major}.${version.minor}.${version.patch}" if="${version.use_semanticversioning}" overwrite="false" />

  <!-- COMPILE VARIABLES -->
  <property name="msbuild.configuration" value="Release" overwrite="false" />
  <property name="msbuild.platform" value="Any CPU" overwrite="false" />
  <!-- Mixed Platforms is the default 4.0 build platform -->
  <!-- This setting allows you to use your own output path by setting to false - this does not work in conjuction with multitargeting -->
  <property name="msbuild.override_output_path" value="true" overwrite="false" />

  <!-- Application Defaults -->
  <property name="run.policychecks" value="false" overwrite="false" />
  <property name="run.manifestbuilder" value="false" overwrite="false" />
  <property name="run.environmentbuilder" value="true" overwrite="false" />
  <property name="run.deploymentbuilder" value="true" overwrite="false" />
  <property name="run.analyzers" value="true" overwrite="false" />
  <property name="run.tests" value="${test.framework != 'none'}" overwrite="false" />
  <property name="run.codecoverage" value="${cover.framework != 'none'}" overwrite="false" />
  <property name="run.ilmerge" value="false" overwrite="false" />
  <property name="run.gems" value="${directory::exists(dirs.gems)}" overwrite="false" />

  <!-- EXTERNAL TOOLS -->
  <property name="app.test.console" value="${dirs.tools}${path.separator}NUnit${path.separator}nunit-console.exe" overwrite="false" if="${test.framework == 'nunit'}" />
  <property name="app.test.console.x86" value="${dirs.tools}${path.separator}NUnit${path.separator}nunit-console-x86.exe" overwrite="false" if="${test.framework == 'nunit'}" />
  <property name="app.test.console" value="${dirs.tools}${path.separator}xUnit${path.separator}xunit.console.clr4.exe" overwrite="false" if="${test.framework == 'xunit'}" />
  <property name="app.test.console" value="${dirs.tools}${path.separator}MbUnit2${path.separator}MbUnit.Cons.exe" overwrite="false" if="${test.framework == 'mbunit2'}" />
  <property name="app.test.console" value="${dirs.program_files}${path.separator}Gallio${path.separator}bin${path.separator}Gallio.Host.exe" overwrite="false" if="${test.framework == 'gallio'}" />

  <property name="dirs.test_results" value="${dirs.build_artifacts}${path.separator}tests" overwrite="false" />
  <property name="file.test_results" value="test-results" overwrite="false" />
  <property name="tests.excluded_categories.comma_separated" value="Database,Integration,Slow,NotWorking,Ignore,database,integration,slow,notworking,ignore" overwrite="false" />

  <property name="app.codecoverage" value="${dirs.tools}${path.separator}OpenCover${path.separator}OpenCover.Console.exe" overwrite="false" if="${cover.framework == 'opencover'}" />
  <property name="app.codecoverage.explorer" value="${dirs.tools}${path.separator}ReportGenerator${path.separator}ReportGenerator.exe" overwrite="false" if="${cover.framework != 'ncover'}" />
  <property name="app.codecoverage" value="${dirs.tools}${path.separator}NCover${path.separator}NCover.Console.exe" overwrite="false" if="${cover.framework == 'ncover'}" />
  <property name="app.codecoverage.explorer" value="${dirs.tools}${path.separator}NCover${path.separator}NCoverExplorer.Console.exe" overwrite="false" if="${cover.framework == 'ncover'}" />

  <property name="codecoverage.filters" value="" overwrite="false" if="${cover.framework == 'ncover'}"  />
  <property name="codecoverage.filters" value="+[${project.name}*]* -[${project.name}*test*]*" overwrite="false" if="${cover.framework == 'opencover'}" />
  <property name="codecoverage.satisfactory_coverage" value="85" />
  <property name="codecoverage.allow_fail" value="false" />
  <property name="file.codecoverage_results" value="coverage.xml" />
  <property name="file.codecoverage_log" value="coverage.log" />
  <property name="dirs.codecoverage_results" value="${dirs.build_artifacts}${path.separator}codecoverage" />

  <property name="app.ndepend" value="${dirs.program_files}${path.separator}NDepend${path.separator}NDepend.Console.exe" overwrite="false" />
  <property name="app.ndepend" value="${dirs.program_files_x86}${path.separator}NDepend${path.separator}NDepend.Console.exe" if="${not file::exists(app.ndepend)}" />
  <property name="run.ndepend" value="${file::exists(app.ndepend)}" overwrite="false" />

  <property name="app.strongname" value="${dirs.program_files}${path.separator}Microsoft SDKs${path.separator}Windows${path.separator}v6.0A${path.separator}Bin${path.separator}sn.exe" overwrite="false" />
  <property name="app.strongname" value="${dirs.program_files_x86}${path.separator}Microsoft SDKs${path.separator}Windows${path.separator}v6.0A${path.separator}Bin${path.separator}sn.exe" if="${not file::exists(app.strongname)}" />

  <property name="app.metrics" value="${dirs.program_files}${path.separator}Microsoft Visual Studio 10.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}Metrics.exe" overwrite="false" />
  <property name="app.metrics" value="${dirs.program_files_x86}${path.separator}Microsoft Visual Studio 10.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}Metrics.exe" if="${not file::exists(app.metrics)}" />
  <property name="app.metrics" value="${dirs.program_files}${path.separator}Microsoft Visual Studio 10.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}Metrics.exe" overwrite="false" />
  <property name="app.metrics" value="${dirs.program_files_x86}${path.separator}Microsoft Visual Studio 11.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}Metrics.exe" if="${not file::exists(app.metrics)}" />
  <property name="app.metrics" value="${dirs.program_files_x86}${path.separator}Microsoft Visual Studio 11.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}Metrics.exe" if="${not file::exists(app.metrics)}" />
  <property name="run.metrics" value="${file::exists(app.metrics)}" overwrite="false" />

  <property name="app.fxcop" value="${path::get-full-path(dirs.program_files)}${path.separator}Microsoft Visual Studio 10.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}FxCopCmd.exe" overwrite="false" />
  <property name="app.fxcop" value="${path::get-full-path(dirs.program_files_x86)}${path.separator}Microsoft Visual Studio 10.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}FxCopCmd.exe" if="${not file::exists(app.fxcop)}" />
  <property name="app.fxcop" value="${path::get-full-path(dirs.program_files)}${path.separator}Microsoft Fxcop 10.0${path.separator}FxCopCmd.exe" if="${not file::exists(app.fxcop)}" />
  <property name="app.fxcop" value="${path::get-full-path(dirs.program_files_x86)}${path.separator}Microsoft Fxcop 10.0${path.separator}FxCopCmd.exe" if="${not file::exists(app.fxcop)}" />
  <property name="app.fxcop" value="${path::get-full-path(dirs.program_files)}${path.separator}Microsoft Visual Studio 11.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}FxCopCmd.exe" overwrite="false" />
  <property name="app.fxcop" value="${path::get-full-path(dirs.program_files_x86)}${path.separator}Microsoft Visual Studio 11.0${path.separator}Team Tools${path.separator}Static Analysis Tools${path.separator}FxCop${path.separator}FxCopCmd.exe" if="${not file::exists(app.fxcop)}" />
  <property name="app.fxcop" value="${path::get-full-path(dirs.program_files)}${path.separator}Microsoft Fxcop 11.0${path.separator}FxCopCmd.exe" if="${not file::exists(app.fxcop)}" />
  <property name="app.fxcop" value="${path::get-full-path(dirs.program_files_x86)}${path.separator}Microsoft Fxcop 11.0${path.separator}FxCopCmd.exe" if="${not file::exists(app.fxcop)}" />
  <property name="app.fxcop_project" value="${project.name}.fxcop" overwrite="false" />
  <!--<property name="file.fxcop_project" value="${path::combine(dirs.solution, app.fxcop_project)}" overwrite="false" /-->
  <property name="file.fxcop_project" value="${dirs.current}${path.separator}${path_to_solution}${path.separator}${app.fxcop_project}" overwrite="false" />
  <property name="run.fxcop" value="${file::exists(app.fxcop)}" overwrite="false" />

  <property name="app.moma" value="${dirs.tools}${path.separator}MoMA${path.separator}MoMA.exe" overwrite="false" />
  <property name="run.moma" value="${file::exists(app.moma)}" overwrite="false" />

  <property name="app.nitriq" value="${path::get-full-path(dirs.program_files)}${path.separator}NimblePros${path.separator}Nitriq Console${path.separator}Nitriq.Console.exe" overwrite="false" />
  <property name="app.nitriq" value="${path::get-full-path(dirs.program_files_x86)}${path.separator}NimblePros${path.separator}Nitriq Console${path.separator}Nitriq.Console.exe" if="${not file::exists(app.nitriq)}" />
  <property name="run.nitriq" value="file::exists(app.nitriq)" overwrite="false" />

  <property name="app.xbuild" value="${dirs.program_files}${path.separator}Mono-2.8${path.separator}bin${path.separator}xbuild.bat" overwrite="false" if="${platform::is-windows()}"/>
  <property name="app.xbuild" value="${dirs.program_files_x86}${path.separator}Mono-2.8${path.separator}bin${path.separator}xbuild.bat" if="${platform::is-windows() and not file::exists(app.xbuild)}"/>
  <property name="app.xbuild" value="xbuild" overwrite="false" if="${platform::is-unix()}" />

  <property name="app.obfuscator" value="${dirs.tools}${path.separator}Eazfuscator.NET${path.separator}Eazfuscator.NET.exe" overwrite="false" />
  <property name="run.obfuscator" value="file::exists(app.obfuscator)" overwrite="false" />

  <property name="app.nuget" value="${dirs.tools}${path.separator}NuGet${path.separator}NuGet.exe" overwrite="false" />
  <property name="app.nuget" value="${path::get-full-path(app.nuget)}" overwrite="false" />
  <property name="run.nuget" value="${directory::exists(dirs.nuget) and file::exists(app.nuget)}" overwrite="false" />

  <property name="app.ruby" value="ruby" overwrite="false" />
  <property name="app.powershell" value="%WINDIR%${path.separator}System32${path.separator}WindowsPowerShell${path.separator}v1.0${path.separator}powershell.exe" overwrite="false" />

  <target name="load_uppercut_assemblies">
    <loadtasks assembly="${path.uppercut.assembly}" if="${file::exists(path.uppercut.assembly)}" />

  </target>

  <target name="run_tasks">
    <echo level="Warning" message="====================" />
    <echo level="Warning" message="${build.step.name}" />
    <echo level="Warning" message="====================" />
    <call target="prepare" if="${target::exists('prepare')}" />
    <customExtension extends="${build.step.path}" type="pre" failonerror="${fail.build.on.error}" />
    <customExtension extends="${build.step.path}" type="replace" failonerror="${fail.build.on.error}" />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <customExtension extends="${build.step.path}" type="post" failonerror="${fail.build.on.error}" />
  </target>

</project>
