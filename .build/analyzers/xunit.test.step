<?xml version="1.0" encoding="utf-8" ?>
<project name="XUnitTester" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This follows a convention for testing with Integration tests being separated from Unit tests - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <include buildfile="${dirs.current.file}${path.separator}..${path.separator}default.build.settings" />
  <property name="build.step.name" value="${project::get-name()}" />
  <property name="build.step.path" value="${project::get-buildfile-path()}" />
  <!-- build step customizations below this -->

  <property name="xunit.separator" value="--" if="${platform::is-unix()}" />
  <property name="xunit.separator" value="/" if="${platform::is-windows()}" />
  <property name="test.args" value="${xunit.separator}xml &quot;${dirs.test_results}${path.separator}${file.test_results}.xml&quot; ${xunit.separator}html &quot;${dirs.test_results}${path.separator}${file.test_results}.html&quot; ${xunit.separator}nunit &quot;${dirs.test_results}${path.separator}${file.test_results}-nunit.xml&quot; " />
  <property name="test.args.exclude" value="${xunit.separator}exclude=&quot;${tests.excluded_categories.comma_separated}&quot;" />
  <property name="dlls.test" value="" />
  <property name="tests.ran" value="false" />
  <property name="tests.run_all" value="false" />

  <target name="go" depends="run_tasks" />

  <target name="run_all_tests" depends="prepare, set_run_all_flag, run_tests, generate_report" description="Like go but runs all tests" />

  <!-- run_normal_tasks is called from run_tasks unless replace extension exists -->
  <target name="run_normal_tasks"
          depends="run_tests, generate_report"
          description="Testing with NUnit."
          if="${run.tests and test.framework == 'xunit' and file::exists(app.test.console)}" />

  <target name="prepare">
    <echo level="Warning" message="Removing and adding ${dirs.test_results}."/>
    <delete dir="${dirs.test_results}" failonerror="false" />
    <mkdir dir="${dirs.test_results}" />
  </target>

  <target name="set_run_all_flag">
    <echo level="Warning" message="Running ALL test assemblies including integration and database tests with xUnit." />
    <property name="tests.run_all" value="true" />
  </target>

  <target name="run_tests" depends="prepare" description="Running Unit Tests">
    <foreach item="File" property="dll.filename">
      <in>
        <items>
          <exclude name="${dirs.build.code}${path.separator}lib${path.separator}**" />
          <exclude name="${dirs.build.code}/_PublishedApplications/**" />
          <exclude name="${dirs.build.code}/**/*Database*dll" if="${not tests.run_all}" />
          <exclude name="${dirs.build.code}/**/*database*dll" if="${not tests.run_all}" />
          <exclude name="${dirs.build.code}/**/*.Integration*dll" if="${not tests.run_all}" />
          <exclude name="${dirs.build.code}/**/*.integration*dll" if="${not tests.run_all}" />
          <exclude name="${dirs.build.code}/**/TestFu.dll" />
          <exclude name="${dirs.build.code}/**/Microsoft.*.dll" />
          <include name="${dirs.build.code}/**/*Test*dll" />
          <include name="${dirs.build.code}/**/*test*dll" />
          <include name="${dirs.build.code}/**/*Spec*dll" />
          <include name="${dirs.build.code}/**/*spec*dll" />
        </items>
      </in>
      <do>
        <if test="${dll.filename !=''}">
          <property name="tests.ran" value="true" />
          <property name="dll.name" value="${string::replace(string::replace(dll.filename,path::get-full-path(dirs.build.code) + '\',''),'\',path.separator)}" />
          <property name="test.args" value="${xunit.separator}xml &quot;${dirs.test_results}${path.separator}${dll.name}-${file.test_results}.xml&quot; ${xunit.separator}html &quot;${dirs.test_results}${path.separator}${dll.name}-${file.test_results}.html&quot; ${xunit.separator}nunit &quot;${dirs.test_results}${path.separator}${dll.name}-${file.test_results}-nunit.xml&quot; " />
          <property name="args.test_runner" value="${dll.name} ${test.args} " />
          <echo level="Warning" message="Running tests using xUnit with args '${args.test_runner}' and putting results in ${dirs.test_results}."/>
          <exec
            program="${app.test.console}"
            workingdir="${dirs.build.code}"
            failonerror="${fail.build.on.error}"
            if="${platform::is-windows()}"
            >
            <arg value="${args.test_runner}" />
          </exec>
          <exec
            program="mono"
            workingdir="${dirs.build.code}"
            failonerror="${fail.build.on.error}"
            if="${platform::is-unix()}"
            >
            <arg value='"${app.test.console}"' />
            <arg value="${args.test_runner}" />
          </exec>
        </if>
      </do>
    </foreach>
  </target>

  <target name="generate_report">
    <if test="${tests.ran}">
      <nunit2report todir="${dirs.test_results}" failonerror="false" >
        <fileset>
        <include name="${dirs.test_results}${path.separator}*-results-nunit.xml"/>
        </fileset>
      </nunit2report>
    </if>
  </target>

  <target name="open_results">
    <echo level="Warning" message="Opening results - ${path::get-full-path(dirs.test_results) + path.separator + file.test_results + '.html'}" />
    <results display="${path::get-full-path(dirs.test_results) + path.separator + file.test_results + '.html'}" />
  </target>

</project>
